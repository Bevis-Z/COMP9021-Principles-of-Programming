"""
Quiz 6 -

Auther:mac
Date:11/11/2022

"""
# COMP9021 22T3
# Quiz 6 *** Due Friday Week 9 @ 9.00pm
#        *** Late penalty 10% per day
#        *** Not accepted after Monday Week 10 @ 9.00pm

# DO *NOT* WRITE YOUR NAME TO MAINTAIN ANONYMITY FOR PLAGIARISM DETECTION


# Randomly generates a grid of 0s and 1s and determines
# the maximum number of "spikes" in a shape.
# A shape is made up of 1s connected horizontally or vertically (it can contain holes).
# A "spike" in a shape is a 1 that is part of this shape and "sticks out"
# (has exactly one neighbour in the shape).
# Neighbours are only considered vertically or horizontally (not diagonally).
# Note that a shape with a single 1 is also a spike.

from random import seed, randrange
import sys

dim = 10


def display_grid():
    for row in grid:
        print('   ', *row)

    # Returns the number of shapes we have discovered and "coloured".


# We "colour" the first shape we find by replacing all the 1s
# that make it with 2. We "colour" the second shape we find by
# replacing all the 1s that make it with 3.
def colour_shapes():
    return True
    # Replace pass above with your code


locator = []
spike_temp = 0


def max_number_of_spikes(nb_of_shapes):
    largest = 0
    global spike_temp
    grid_wider = [[0, 0] for _ in range(len(grid))]
    n = 0

    for row in grid:
        for k in row:
            grid_wider[n].insert(-1, k)
        n = n + 1
    grid_temp = [[0] * (len(grid[0]) + 2), *grid_wider, [0] * (len(grid[0]) + 2)]

    largest = largest_finder(grid_temp, largest)

    return largest


def largest_finder(grid_temp, largest):
    global spike_temp
    for i in range(1, len(grid_temp) - 1):
        for j in range(1, len(grid_temp[0]) - 1):
            if grid_temp[i][j] == 1:
                spike_finder(i, j)
                if spike_temp > largest:
                    largest = spike_temp
                spike_temp = 0
    return largest


def spike_finder(i, j):
    global spike_temp
    grid_wider = [[0, 0] for _ in range(len(grid))]
    _ = 0

    for row in grid:
        for e in row:
            grid_wider[_].insert(-1, e)
        _ = _ + 1

    extend_grid = [[0] * (len(grid[0]) + 2), *grid_wider, [0] * (len(grid[0]) + 2)]

    if extend_grid[i - 1][j] == 0 and extend_grid[i + 1][j] == 0 and extend_grid[i][j - 1] == 0 and extend_grid[i][
        j + 1] == 0:
        return

    else:
        if [i, j] not in locator:
            locator.append([i, j])
            if extend_grid[i + 1][j] + extend_grid[i - 1][j] + extend_grid[i][j + 1] + extend_grid[i][j - 1]== 1:
                spike_temp += 1

            if extend_grid[i][j - 1] == 1:
                spike_finder(i, j - 1)

            if extend_grid[i + 1][j] == 1:
                spike_finder(i + 1, j)

            if extend_grid[i - 1][j] == 1:
                spike_finder(i - 1, j)

            if extend_grid[i][j + 1] == 1:
                spike_finder(i, j + 1)
            else:
                return
        else:
            return


try:
    for_seed, density = (int(x) for x in input('Enter two integers, the second '
                                               'one being strictly positive: '
                                               ).split()
                         )
    if density <= 0:
        raise ValueError
except ValueError:
    print('Incorrect input, giving up.')
    sys.exit()

seed(for_seed)
grid = [[int(randrange(density) != 0) for _ in range(dim)]
        for _ in range(dim)
        ]
print('Here is the grid that has been generated:')
display_grid()
nb_of_shapes = colour_shapes()
print('The maximum number of spikes of some shape is:',
      max_number_of_spikes(nb_of_shapes)
      )
