"""
quiz_4 - 

Auther:mac
Date:27/10/2022

"""
# COMP9021 22T3
# Quiz 4 *** Due Friday Week 7 @ 9.00pm
#        *** Late penalty 5% per day
#        *** Not accepted after Monday Week 8 @ 9.00pm

# DO *NOT* WRITE YOUR NAME TO MAINTAIN ANONYMITY FOR PLAGIARISM DETECTION


# Implements a function that, based on the encoding of
# a single strictly positive integer that in base 2
# reads as b_1 ... b_n, as b_1b_1 ... b_nb_n, encodes
# a sequence of strictly positive integers N_1 ... N_k
# with k >= 1 as N_1* 0 ... 0 N_k* where for all 0 < i <= k,
# N_i* is the encoding of N_i.
#
# Implements a function to decode a strictly positive integer N
# into a sequence of (one or more) strictly positive
# integers according to the previous encoding scheme,
# or return None in case N does not encode such a sequence.


import sys


# from function_backend import decode

def encode(list_of_integers):
    temp_list = []
    temp_content = ''
    temp_output = []
    for item in list_of_integers:
        temp_list.append(bin(item)[2:])
    for item in temp_list:
        for j in range(len(item)):
            temp_content += item[j] * 2
        temp_content += '0'
    temp_output = list(temp_content)
    temp_output.pop()
    temp_output = ''.join(temp_output)
    return int(temp_output, 2)


def decode(integer):
    temp_list = []
    temp_list = bin(integer)[2:]
    temp_output = ''
    result = []
    i = 0
    if len(temp_list) == 1:
        return None
    while i < int(len(temp_list)):
        if temp_list[i] == temp_list[i + 1]:
            temp_output = temp_output + temp_list[i]
            i += 2
        elif temp_list[i] != temp_list[i + 1] and temp_list[i] == '0':
            result.append(temp_output)
            temp_output = ''
            i += 1
        else:
            return None
    result.append(temp_output)
    return [int(_, 2) for _ in result]


print('Input either a strictly positive integer')
the_input = eval(input('or a nonempty list of strictly positive integers: '))
if type(the_input) is int:
    print('  In base 2,', the_input, 'reads as', bin(the_input)[2:])
    decoding = decode(the_input)
    if decoding is None:
        print('Incorrect encoding!')
    else:
        print('  It encodes: ', decode(the_input))
else:
    print('  In base 2,', the_input, 'reads as',
          f'[{", ".join(bin(e)[2:] for e in the_input)}]'
          )
    print('  It is encoded by', encode(the_input))
